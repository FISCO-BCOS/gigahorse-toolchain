name: FISCO-BCOS GitHub Actions
on:
  push:
    branches-ignore:
      - "**-1.3"
      - "**-1.5"
    tags-ignore:
      - v1.*
    paths-ignore:
      - "docs/**"
      - "Changelog.md"
      - "README.md"
  pull_request:
    paths-ignore:
      - "docs/**"
      - "Changelog.md"
      - "README.md"
  release:
    types: [published, created, edited]
env:
  CCACHE_DIR: ${{ github.workspace }}/ccache

jobs:
  build:
    name: build on x86_64
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, macos-latest]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 5
          submodules: true
      # - name: check commit
      #   if: ${{ runner.os == 'Linux' && github.base_ref != 'master' && github.event_name == 'pull_request' }}
      #   run: bash tools/ci/check-commit.sh
      - uses: actions/cache@v2
        id: cache
        with:
          path: souffle-2.2
          key: deps-v1-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
          restore-keys: |
            deps-v1-${{ runner.temp }}-${{ github.base_ref }}-${{ hashFiles('.github/workflows/workflow.yml') }}
            deps-v1-${{ runner.temp }}-${{ github.base_ref }}-
            deps-v1-${{ runner.temp }}-
      - name: install macOS dependencies
        if: runner.os == 'macOS'
        run: brew install openssl@1.1 ccache gmp cmake bison libffi mcpp pkg-config boost
      - name: install Ubuntu dependencies
        if: runner.os == 'Linux'
        run: sudo apt install -y git wget build-essential clang cmake libssl-dev zlib1g-dev ccache mcpp libgmp-dev flex bison patch libffi-dev libboost-all-dev python3-setuptools python3-wheel
      - name: install rust language
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2021-06-17
          override: true
      - name: compile
        run: bash prepare_gigahorse.sh
      - uses: actions/upload-artifact@v2
        with:
          name: tools-${{ runner.os }}.tar.gz
          path: bin/tools.tar.bz2
      - uses: actions/upload-artifact@v2
        with:
          name: evm_static_analysis-${{ runner.os }}-${{ runner.arch }}.sh
          path: evm_static_analysis.sh

  build_aarch64:
    name: build on aarch64 ubuntu
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2.1.0
        with:
          fetch-depth: 5
          submodules: true
      - uses: uraimo/run-on-arch-action@v2.1.1
        name: Run commands
        id: runcmd
        with:
          arch: aarch64
          distro: ubuntu18.04

          # Not required, but speeds up builds by storing container images in
          # a GitHub package registry.
          githubToken: ${{ github.token }}
          dockerRunArgs: |
            --volume "${PWD}:/data"
          install: |
            apt-get update -q -y
            apt remove -y --purge --auto-remove cmake
            apt install -y software-properties-common lsb-release && apt clean all
            apt install -y git wget build-essential clang libssl-dev zlib1g-dev ccache mcpp libgmp-dev flex bison patch libffi-dev libboost-all-dev python3-setuptools python3-wheel curl python3-pip wget
            wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null
            apt-add-repository "deb https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main"
            apt -y update && apt install -y kitware-archive-keyring && apt update -y && apt install -y cmake
            curl https://sh.rustup.rs -sSf | sh -s -- -y
          run: |
            uname -a
            source $HOME/.cargo/env
            bash prepare_gigahorse.sh
      - uses: actions/upload-artifact@v2
        with:
          name: tools-${{ runner.os }}-aarch64.tar.gz
          path: bin/tools.tar.bz2
      - uses: actions/upload-artifact@v2
        with:
          name: evm_static_analysis-${{ runner.os }}-aarch64.sh
          path: evm_static_analysis.sh
