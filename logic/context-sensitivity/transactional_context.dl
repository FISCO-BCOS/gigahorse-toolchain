

.comp TransactionalContext <LocalAnalysis> : PublicComponentContextSensitivity <LocalAnalysis> {
  // inverse-escape analysis
  .decl Block_Uses_Local(block: Block, var: VariableOrStackIndex)
  .decl StaticBlockJumpTarget(caller: Block, target: Value)
  // We're only interested in private functions
  // No ambiguity for public functions
  .decl PrivateFunctionCallOrReturn(caller: Block)

  Block_Uses_Local(block, var) :-
    local.Statement_Block(stmt, block),
    local.Statement_Uses_Local(stmt, var, _).

  PrivateFunctionCallOrReturn(caller) :-
    StaticBlockJumpTarget(caller, _),
    local.Statement_Block(stmt, caller),
    local.Statement_Defines(stmt, var),
    local.Variable_Value(var, val),
    local.JUMPDEST(as(val, symbol)),
    !Block_Uses_Local(caller, var).

  PrivateFunctionCallOrReturn(caller) :-
    local.Statement_Block(stmt, caller),
    local.JUMP(stmt),
    !local.ImmediateBlockJumpTarget(caller, _).

  StaticBlockJumpTarget(caller, target) :-
    local.ImmediateBlockJumpTarget(caller, targetVar),
    local.Variable_Value(targetVar, target),
    local.JUMPDEST(as(target, symbol)).

  // Trivial control flow case for when there is no function call
  // OR max conext depth is zero
  // Split into two rules to add plan.
  MergeContext(ctx, caller, ctx):-
    ReachableContext(ctx, caller),
    #ifndef NO_PUBLIC_CONTEXT
    !local.PublicFunction(caller, _),
    #endif
    !PrivateFunctionCallOrReturn(caller).

  MergeContext(ctx, caller, ctx):-
    ReachableContext(ctx, caller),
    #ifndef NO_PUBLIC_CONTEXT
    !local.PublicFunction(caller, _),
    #endif
    DecomposeContext(ctx, pub, _),
    MaxContextDepth(pub, 0).
    .plan 1:(2,3,1)

  // Complex control flow case
  MergeContext(ctx, caller, [pub, newPrivateContext]):-
    ReachableContext(ctx, caller),
    PrivateFunctionCallOrReturn(caller),
    DecomposeContext(ctx, pub, pri),
    TruncateContextIfNeeded(pub, pri, cutDownPri),
    #ifndef NO_PUBLIC_CONTEXT
    !local.PublicFunction(caller, _),
    #endif
    newPrivateContext = [caller, cutDownPri].
    .plan 1:(3,1,2,4), 2:(4,3,1,2)
}