#define MAX_INSERTS 5


#define COPY_CODE(to, from)\
to.Statement_Next(stmt, next) :- from.Statement_Next(stmt, next).\
to.Statement_Opcode(stmt, op) :- from.Statement_Opcode(stmt, op).\
to.PushValue(stmt, value) :- from.PushValue(stmt, value).

#define COPY_OUTPUT(to, from)\
to.Statement_Next(stmt, next) :- from.Out_Statement_Next(stmt, next).\
to.Statement_Opcode(stmt, op) :- from.Out_Statement_Opcode(stmt, op).\
to.PushValue(stmt, value) :- from.Out_PushValue(stmt, value).

#define INITIALIZE_STATEMENT_INSERTOR(_insertor, to)\
.init _insertor = StatementInsertor \
to.Statement_Next(stmt, next) :- _insertor.Out_Statement_Next(stmt, next).\
to.Statement_Opcode(stmt, op) :- _insertor.Out_Statement_Opcode(stmt, op).\
to.PushValue(stmt, value) :- _insertor.Out_PushValue(stmt, value).

#define INITIALIZE_STATEMENT_INSERTOR_FROM(_insertor, from, to)\
COPY_CODE(_insertor, from)\
INITIALIZE_STATEMENT_INSERTOR(_insertor, to)

#define ISLABEL(value) (substr(value, 0, 9) = "JUMPDEST:")
#define MAKE_LABEL_REFERENCE(value) cat("JUMPDEST:", value)
#define GET_LABEL_REFERENCE(value) substr(value, 9, 30)

.comp CodeTransformer {
   // Inputs
  .decl Statement_Next(stmt: Statement, next: Statement)
  .decl Statement_Opcode(stmt: Statement, op: Opcode)
  .decl PushValue(stmt: Statement, value: Value)
      
  // Outputs
  .decl Out_Statement_Next(stmt: Statement, next: Statement)
  .decl Out_Statement_Opcode(stmt: Statement, op: Opcode)
  .decl Out_PushValue(stmt: Statement, value: Value)
}

.comp StatementInsertor : CodeTransformer {

  .type Insertion = [ op: Opcode, value: Value ]
  .type Insertions = [ insertion:Insertion, rest:Insertions ]

  // Insertions
  .decl insertOps(stmt: Statement, insertions: Insertions)
  
  // Modifications
  .decl changeOp(stmt: Statement, op: Opcode)
  changeOp(stmt, op) :- changeOp(stmt, op). // suppress warning

  // Removal
  .decl removeOp(stmt: Statement)
  removeOp(stmt) :- removeOp(stmt). // suppress warning

  .decl MetaData(newStmt: Statement, value: Value)
  
  // Simple translation
  .decl insertOp(stmt: Statement, op: Opcode, value: Value, order: number)

  .decl insertOpsN(stmt: Statement, insertions: Insertions, n: number)
  insertOpsN(stmt, insertions, 0) :-
   insertOps(stmt, insertions).

  insertOp(stmt, op, value, n),
  insertOpsN(stmt, rest, n+1) :-
   insertOpsN(stmt, [[op, value], rest], n).


  .decl PreInsertedOpNewStatementNum(stmt: Statement, order: number, newStmt: number)
  
  PreInsertedOpNewStatementNum(stmt, order, @hex_to_number(stmt) * MAX_INSERTS + order) :-
    insertOp(stmt, _, _, order).

  .decl PreInsertedOpMissingStmt(n : number)

  PreInsertedOpMissingStmt(newStmt - 1) :-
     PreInsertedOpNewStatementNum(_, _, newStmt), newStmt > 0,
     !PreInsertedOpNewStatementNum(_, _, newStmt - 1).

  PreInsertedOpMissingStmt(newStmt - 1) :-
     PreInsertedOpMissingStmt(newStmt), newStmt > 0,
     !PreInsertedOpNewStatementNum(_, _, newStmt - 1).

   .decl MaxStmt(n: number)
   MaxStmt(n) :- n = max @hex_to_number(stmt) : Statement_Opcode(stmt, _).

  .decl InsertedOpNewStatement(stmt: Statement, order: number, newStmt: Statement)

  .decl WastedSlots(newStmt: number, n: number)

  .decl TempPreInsertedOpNewAndMissingStatementNum(smallerThanNewStmt: number, newStmt: number)
  TempPreInsertedOpNewAndMissingStatementNum(smallerThanNewStmt, newStmt) :-
     PreInsertedOpNewStatementNum(_, _, newStmt),
     PreInsertedOpMissingStmt(smallerThanNewStmt), smallerThanNewStmt < newStmt.
     
  WastedSlots(newStmt, n) :-
     PreInsertedOpNewStatementNum(_, _, newStmt),
     n = count : { TempPreInsertedOpNewAndMissingStatementNum(_, newStmt) }.

  InsertedOpNewStatement(stmt, order, @number_to_hex(newStmt - n + maxStmt + 1)) :-
    PreInsertedOpNewStatementNum(stmt, order, newStmt),
    MaxStmt(maxStmt),
    WastedSlots(newStmt, n).

  Out_Statement_Opcode(stmt, op) :-
    Statement_Opcode(stmt, op),
    !changeOp(stmt, _),
    !removeOp(stmt).

  Out_Statement_Opcode(stmt, op) :-
    changeOp(stmt, op),
    !removeOp(stmt).

  Out_Statement_Opcode(newStmt, op) :-
    InsertedOpNewStatement(stmt, order, newStmt),
    insertOp(stmt, op, _, order).

  Out_PushValue(stmt, value) :-
    Out_Statement_Opcode(stmt, op),
    PushValue(stmt, value),
    OpcodeIsPush(op),
    !removeOp(stmt).

  MetaData(newStmt, value) :-
    InsertedOpNewStatement(stmt, order, newStmt),
    insertOp(stmt, op, value, order),
    !OpcodeIsPush(op).


  Out_PushValue(newStmt, value) :-
    InsertedOpNewStatement(stmt, order, newStmt),
    insertOp(stmt, op, value, order),
    !ISLABEL(value),
    OpcodeIsPush(op).

  Out_PushValue(newStmt, @cast_to_symbol(actualLabel)) :-
    insertOp(stmt, op, label, order),
    OpcodeIsPush(op),
    ISLABEL(label),
    insertOp(stmtTo, "JUMPDEST", label, orderTo),
    InsertedOpNewStatement(stmtTo, orderTo, actualLabel),
    InsertedOpNewStatement(stmt, order, newStmt).

  .decl PreOut_Statement_Next(stmt: Statement, next: Statement)
  
  PreOut_Statement_Next(stmt, next) :-
   Statement_Next(stmt, next),
   !insertOp(next, _, _, _).

  PreOut_Statement_Next(stmt, next) :-
   Statement_Next(stmt, post),
   InsertedOpNewStatement(post, 0, next).

  PreOut_Statement_Next(stmt, next) :-
   InsertedOpNewStatement(post, i, stmt),
   InsertedOpNewStatement(post, i+1, next).

  PreOut_Statement_Next(stmt, next) :-
   InsertedOpNewStatement(next, i, stmt),
   !InsertedOpNewStatement(next, i+1, _).

  .decl PossibleNext(stmt: Statement, next: Statement, n: number)

  PossibleNext(stmt, next, 0) :-
    PreOut_Statement_Next(stmt, next).
   
  PossibleNext(stmt, nextnext, n+1) :-
    PossibleNext(stmt, next, n),
    PreOut_Statement_Next(next, nextnext),
    removeOp(next).

  .decl Max_Statement_Next(stmt: Statement, n: number)

  Max_Statement_Next(stmt, n) :-
     PossibleNext(stmt, _, _),
     n = max m : PossibleNext(stmt, _, m).

  Out_Statement_Next(stmt, next) :-
     PossibleNext(stmt, next, n),
     Max_Statement_Next(stmt, n),
     !removeOp(stmt).

  // TODO rest of the cases for removeOp
  FAILIF("Not total order", Out_Statement_Next(stmt, next), Out_Statement_Next(stmt, next2), next != next2).
  FAILIF("Missing Order", Out_Statement_Opcode(stmt, _), !Out_Statement_Next(stmt, _), !Out_Statement_Next(_, stmt)).
  FAILIF(cat("Missing Opcode ", stmt), (Out_Statement_Next(stmt, _) ; Out_Statement_Next(_, stmt)), !Out_Statement_Opcode(stmt, _)).
  FAILIF(cat("Missing Push Value ", stmt), Out_Statement_Opcode(stmt, op), OpcodeIsPush(op), !Out_PushValue(stmt, _)).
  
}

/**
  Component to perform an anscenting sort of an input set.
*/
.comp AbstractAscentingSorter {
  .decl Input(id:symbol)

  .decl InputToNumber(id:symbol, idNum:number) overridable

  .decl IsLessThan(id1:symbol, id2:symbol)
  .decl IsLessThanNotNext(id1:symbol, id2:symbol)

  .decl Input_Next(prev:symbol, next:symbol)

  IsLessThan(id1, id2):-
    InputToNumber(id1, num1),
    InputToNumber(id2, num2),
    num1 < num2.

  IsLessThanNotNext(id1, id2):-
    IsLessThan(id1, id2),
    IsLessThan(id1, other),
    IsLessThan(other, id2).

  Input_Next(prev, next):-
    IsLessThan(prev, next),
    !IsLessThanNotNext(prev, next).
}

/**
  Sort using souffle's internal ordinal number.
  Useful when we just want to get any order.
*/
.comp OrdAscentingSorter : AbstractAscentingSorter {

  .override InputToNumber
  InputToNumber(id, ord(id)):-
    Input(id).
}

/**
  
*/
.comp BlockCloner : CodeTransformer {

  .init localAnalysis = LocalAnalysis

  localAnalysis.PushValue(push, val):- PushValue(push, val).
  localAnalysis.Statement_Opcode(stmt, op):- Statement_Opcode(stmt, op).
  localAnalysis.Statement_Next(stmt, stmtNext):- Statement_Next(stmt, stmtNext).

  .output Out_Statement_Opcode, Out_Statement_Next, Out_PushValue
  .output Statement_Opcode, Statement_Next, PushValue
  // find the last statement in the original bytecode, start adding from there.
  .decl MaxOriginalStatement(stmt:Statement)
  // compute the block size to use on the cloned blocks
  .decl BlockSize(block:Block, size:number)
  // find the offset (numeric diff from block head) of every statement, helps with cloning
  .decl Statement_BlockOffset(statement:Statement, block:Block, offset:number)

  .decl DirectBlockEdge(from:Block, to:Block)

  .decl ClonedBlockAddressPushedBy(pushBlock:Block, pushStmt:Statement, blockToClone:Block)

  .decl BlockPushedToStack(pushStmt:Statement, pushedVar:Variable, pushedBlock:Block)
  .decl BlockPushesBlockToStack(from: Block, pushedBlock: Block)
  // To make this more flexible we'll be performing the cloning at the use level:
  //   pick the interesting blocks
  //   find their uses (pushes to the stack) that we want to clone
  // Basic way to compute this would be to only inline blocks for direct jumps
  .decl BlockToClone(pushBlock:Block, blockToClone:Block)
  // For each fact of BlockToClone we create an identifier and sort them based on it
  .decl BlockToCloneOpID(pushBlock:Block, blockToClone:Block, opID:symbol)

  // After we compute the order of the inserted clone blocks, we assign each cloned instance to a starting bytecode offset.
  .decl BlockToCloneNewInstance(pushBlock:Block, blockToClone:Block, generatedBlock:Block)

  .decl StatementToClonedStatement(pushBlock:Block, blockToClone:Block, stmt:Statement, generatedStatement:Statement)
  .output StatementToClonedStatement
  .init cloneOpSorter = OrdAscentingSorter

  .decl Block_OriginalBlock(block:Block, originalBlock:Block)
  .output Block_OriginalBlock
  .output BlockToClone, DirectBlockEdge, BlockPushedToStack, BlockPushesBlockToStack, BlockToCloneNewInstance

  MaxOriginalStatement(maxStmt):-
    maxStmtNumber = max stmtNumber : { Statement_Opcode(stmt, _), stmtNumber = @hex_to_number(stmt)},
    maxStmt = @number_to_hex(maxStmtNumber).

  BlockSize(block, @hex_to_number(tail) - @hex_to_number(block)):-
    localAnalysis.BasicBlock_Tail(block, tail).

  Statement_BlockOffset(stmt, block, @hex_to_number(stmt) - @hex_to_number(block)):-
    localAnalysis.Statement_Block(stmt, block).

  DirectBlockEdge(from, @cast_to_symbol(to)):-
    localAnalysis.ImmediateBlockJumpTarget(from, pushedVar),
    localAnalysis.Variable_Value(pushedVar, to).

  // Disable this for now. Try different way to inline.
  // DirectBlockJumpToAddrPushedBy(from, pushStmt):-
  //   localAnalysis.ImmediateBlockJumpTarget(from, pushedVar),
  //   localAnalysis.Statement_Defines(pushStmt, pushedVar).
  
  //Maybe change it to only consider direct block edges again?
  ClonedBlockAddressPushedBy(pushBlock, pushStmt, blockToClone):-
    BlockToClone(pushBlock, blockToClone),
    BlockPushesBlockToStack(pushBlock, blockToClone),
    BlockPushedToStack(pushStmt, _, blockToClone),
    localAnalysis.Statement_Block(pushStmt, blockToClone).

  BlockPushedToStack(pushStmt, pushedVar, @cast_to_symbol(pushedBlock)):-
    localAnalysis.Variable_Value(pushedVar, pushedBlock),
    localAnalysis.JUMPDEST(@cast_to_symbol(pushedBlock)),
    localAnalysis.Statement_Defines(pushStmt, pushedVar).

  BlockPushesBlockToStack(block, pushedBlock):-
    BlockPushedToStack(pushStmt, _, pushedBlock),
    localAnalysis.Statement_Block(pushStmt, block).

  // Lets start by cloning all non immediate blocks.
  BlockToClone(from, to):-
    BlockPushesBlockToStack(from, to),
    //DirectBlockEdge(otherFrom, to),
    // REVIEW: Used to be that they had 2 distinct direct jumps to them
    // Now one is enough, as long as another block also pushes it to its stack
    BlockPushesBlockToStack(otherFrom, to),
    localAnalysis.StackBalanceBlock(to),
    from != otherFrom,
    !localAnalysis.ImmediateBlockJumpTarget(to, _).

  BlockToCloneOpID(pushBlock, blockToClone, cat(pushBlock, blockToClone)):-
    BlockToClone(pushBlock, blockToClone).

  cloneOpSorter.Input(opID):- BlockToCloneOpID(_, _, opID).

  BlockToCloneNewInstance(pushBlock, blockToClone, generatedBlock):-
    BlockToCloneOpID(pushBlock, blockToClone, opID),
    !cloneOpSorter.Input_Next(_, opID),
    MaxOriginalStatement(maxStmt),
    generatedBlock = @add_256(maxStmt, "0x20").

  BlockToCloneNewInstance(pushBlock, blockToClone, generatedBlock):-
    BlockToCloneOpID(prevPushBlock, prevBlockToClone, prevOpID),
    cloneOpSorter.Input_Next(prevOpID, opID),
    BlockToCloneNewInstance(prevPushBlock, prevBlockToClone, prevCloneInstance),
    BlockToCloneOpID(pushBlock, blockToClone, opID),
    BlockSize(prevBlockToClone, prevCloneBlockSize),
    generatedBlock = @add_256(prevCloneInstance, @number_to_hex(prevCloneBlockSize + 32)).

  StatementToClonedStatement(pushBlock, blockToClone, stmt, generatedStatement):-
    BlockToCloneNewInstance(pushBlock, blockToClone, generatedBlock),
    localAnalysis.Statement_Block(stmt, blockToClone),
    generatedStatement = @add_256(generatedBlock, @sub_256(stmt, blockToClone)).


  // Keep order for all original statements.
  Out_Statement_Next(stmt, nextStmt):-
    Statement_Next(stmt, nextStmt).

  Out_Statement_Next(lastOriginalStmt, clonedHead):-
    MaxOriginalStatement(lastOriginalStmt),
    BlockToCloneOpID(pushBlock, blockToClone, opID),
    !cloneOpSorter.Input_Next(_, opID),
    localAnalysis.BasicBlock_Head(blockToClone, oldHead),
    StatementToClonedStatement(pushBlock, blockToClone, oldHead, clonedHead).

  Out_Statement_Next(genStmt, nextGenStmt):-
    StatementToClonedStatement(pushBlock, blockToClone, stmt, genStmt),
    Statement_Next(stmt, nextStmt),
    StatementToClonedStatement(pushBlock, blockToClone, nextStmt, nextGenStmt).

  Out_Statement_Next(prevClonedTail, nextClonedHead):-
    cloneOpSorter.Input_Next(prevOpID, nextOpID),
    BlockToCloneOpID(prevPushBlock, prevBlockToClone, prevOpID),
    BlockToCloneOpID(nextPushBlock, nextBlockToClone, nextOpID),
    localAnalysis.BasicBlock_Tail(prevBlockToClone, oldTail),
    localAnalysis.BasicBlock_Head(nextBlockToClone, oldHead),
    StatementToClonedStatement(prevPushBlock, prevBlockToClone, oldTail, prevClonedTail),
    StatementToClonedStatement(nextPushBlock, nextBlockToClone, oldHead, nextClonedHead).

  Out_Statement_Opcode(oldStmt, op):-
    Statement_Opcode(oldStmt, op).

  Out_Statement_Opcode(clonedStmt, op):-
    Statement_Opcode(oldStmt, op),
    StatementToClonedStatement(_, _, oldStmt, clonedStmt).

  Out_PushValue(oldStmt, oldVal):-
    PushValue(oldStmt, oldVal),
    !ClonedBlockAddressPushedBy(_, oldStmt, _).

  Out_PushValue(oldStmt, @cast_to_symbol(newVal)):-
    PushValue(oldStmt, _),
    ClonedBlockAddressPushedBy(pushBlock, oldStmt, blockToClone),
    BlockToCloneNewInstance(pushBlock, blockToClone, newVal).

  // Note: For now the cloned blocks should have no pushes
  Out_PushValue(clonedStmt, val):-
    PushValue(oldStmt, val),
    StatementToClonedStatement(_, _, oldStmt, clonedStmt).

  Block_OriginalBlock(block, block):-
    localAnalysis.Statement_Block(_, block).
  
  Block_OriginalBlock(block, originalBlock):-
    BlockToCloneNewInstance(_, originalBlock, block).
}

// Adding analytic here to 
// .decl Analytics_JumpToManyWouldNotHaveBeenCloned(blk:IRBlock)
// .output Analytics_JumpToManyWouldNotHaveBeenCloned

// Analytics_JumpToManyWouldNotHaveBeenCloned(irblk):-
//   Analytics_JumpToMany(irblk),
//   JumpToMany_ImprecisionSource(irblk, blk),
//   !blockCloner.BlockToClone(_, blk).

.decl Analytics_JumpToManyWouldHaveBeenCloned(blk:IRBlock)
.output Analytics_JumpToManyWouldHaveBeenCloned, PrivateFunctionCallOrReturn

Analytics_JumpToManyWouldHaveBeenCloned(irblk):-
  Analytics_JumpToMany(irblk),
  JumpToMany_ImprecisionSource(irblk, blk),
  blockCloner.BlockToClone(_, blk).